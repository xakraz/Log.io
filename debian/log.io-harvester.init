#! /bin/sh
### BEGIN INIT INFO
# Provides:          log.io-harvester
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Log.io Web and Log Server
# Description:       Script to manage Log.io-harvester, service that send logs message to the server.
### END INIT INFO

# Author: Xavier KrantzÂ <xkrantz@viadeoteam.com>
#

#
# Default vars
#
# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Log.io Server service"
NAME=log.io-harvester
SCRIPTNAME=/etc/init.d/$NAME

# Daemons specific
USER=log.io
HOME=/usr/lib/log.io/node_modules/log.io
DAEMON=${HOME}/bin/node
DAEMON_ARGS=${HOME}/bin/${NAME}
PIDFILE=/var/run/log.io/$NAME.pid
LOGFILE=/var/log/log.io/${NAME}.log
ERROR_PROGRAM_NOT_INSTALLED=5
VERBOSE=yes

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions


#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been background  started
	#   1 if daemon was already running
	#   2 if daemon could not be started

  ## Is Running ?
  pidofproc -p $PIDFILE >/dev/null
  [ "$?" = 0 ] && log_daemon_msg "$DESC already runnig..." "$NAME" && return 1

  # Fork off node into the background and log to a file
  [ -x $exec ] || exit $ERROR_PROGRAM_NOT_INSTALLED
  /bin/su -s /bin/bash -c "/bin/bash -c 'echo \$\$ >${PIDFILE} && exec ${DAEMON} ${DAEMON_ARGS} start >>${LOGFILE} 2>&1 </dev/null' &" $USER
  [ $? -ne 0 ] && return 2
  return 0

#	start-stop-daemon --start --quiet --chdir $HOME --chuid $USER --make-pidfile --pidfile $PIDFILE --exec $DAEMON \
#                $DAEMON_ARGS -conf $HOME/conf \
#                > /dev/null \
#		|| return 1
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred

  ## Is Running ?
  pidofproc -p $PIDFILE >/dev/null
  [ "$?" != 0 ] && log_daemon_msg "$DESC not runnig !" "$NAME" && return 1

  ## Stop the Daemon
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --user log.io
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2

	# Many daemons don't delete their pidfiles when they exit.
  log_daemon_msg "Removing PIDFILE : $PIDFILE" "$NAME"
	rm -f $PIDFILE
	return "$RETVAL"
}


case "$1" in
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
    do_start
    case "$?" in
      0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
      2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
	;;
  stop)
    [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
    do_stop
    case "$?" in
      0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
      2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
	;;
  status)
    status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
  ;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart}" >&2
	exit 3
	;;
esac

:
